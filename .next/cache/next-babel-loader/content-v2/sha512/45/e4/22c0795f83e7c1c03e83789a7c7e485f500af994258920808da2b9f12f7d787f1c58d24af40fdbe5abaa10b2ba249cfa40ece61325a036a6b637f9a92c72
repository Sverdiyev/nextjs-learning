{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nimport Head from 'next/head';\nconst Dummy_Meetups = [{\n  id: 'm1',\n  title: 'first meetup',\n  image: 'https://images.unsplash.com/photo-1640210178824-d029d3cfd676?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1051&q=80',\n  address: 'lviv',\n  description: 'describe me '\n}, {\n  id: 'm2',\n  title: 'first meetup',\n  image: 'https://images.unsplash.com/photo-1640210178824-d029d3cfd676?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1051&q=80',\n  address: 'lviv',\n  description: 'describe me '\n}];\n\nfunction MeetupDetails(props) {\n  const {\n    meetup\n  } = props;\n  const router = useRouter();\n  if (router.isFallback) return /*#__PURE__*/_jsx(\"div\", {\n    children: \"Loading...\"\n  });\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsxs(\"title\", {\n        children: [meetup.title, \" \"]\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: \"browse these meetups pls\"\n      })]\n    }), /*#__PURE__*/_jsx(MeetupDetail, {\n      image: meetup.image,\n      description: meetup.description,\n      address: meetup.address,\n      title: meetup.title\n    })]\n  });\n}\n\nexport async function getStaticPaths() {\n  const password = 'aUSjJhO7eUkOOC1t';\n  const username = 'learningnext';\n  const database = 'nextJsDB';\n  const url = `mongodb+srv://${username}:${password}@learning.j1yvg.mongodb.net/${database}?retryWrites=true&w=majority`;\n  const client = new MongoClient(url);\n  await client.connect();\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const loadedMeetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  let meetupsId = loadedMeetups.map(meetup => {\n    const meetupId = meetup._id.toString();\n\n    return {\n      params: {\n        meetupId\n      }\n    };\n  });\n  return {\n    fallback: true,\n    paths: meetupsId\n  };\n} // export async function getStaticProps({ params: {slug} }) {\n\nexport async function getStaticProps(context) {\n  const password = 'aUSjJhO7eUkOOC1t';\n  const username = 'learningnext';\n  const database = 'nextJsDB';\n  const url = `mongodb+srv://${username}:${password}@learning.j1yvg.mongodb.net/${database}?retryWrites=true&w=majority`;\n  const client = new MongoClient(url);\n  await client.connect();\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const {\n    meetupId\n  } = context.params;\n  const loadedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  console.log('ðŸš€ ~ getStaticProps ~ loadedMeetup', loadedMeetup);\n  client.close();\n  const meetup = {\n    title: loadedMeetup.title,\n    address: loadedMeetup.address,\n    image: loadedMeetup.image,\n    description: loadedMeetup.description,\n    id: loadedMeetup._id.toString()\n  };\n  return {\n    props: {\n      meetup: meetup\n    }\n  };\n}\nexport default MeetupDetails;","map":null,"metadata":{},"sourceType":"module"}