{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/SashaVerdiyev/Desktop/WebDev/react_course/nextJs/pages/[meetupId]/index.js\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nimport Head from 'next/head';\n\nfunction MeetupDetails(props) {\n  const {\n    meetup\n  } = props;\n  const router = useRouter();\n  if (router.isFallback) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 33\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: [meetup.title, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"browse these meetups pls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: meetup.image,\n      description: meetup.description,\n      address: meetup.address,\n      title: meetup.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nexport async function getStaticPaths() {\n  const password = 'aUSjJhO7eUkOOC1t';\n  const username = 'learningnext';\n  const database = 'nextJsDB';\n  const url = `mongodb+srv://${username}:${password}@learning.j1yvg.mongodb.net/${database}?retryWrites=true&w=majority`;\n  const client = new MongoClient(url);\n  await client.connect();\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const loadedMeetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  let meetupsId = loadedMeetups.map(meetup => {\n    const meetupId = meetup._id.toString();\n\n    return {\n      params: {\n        meetupId\n      }\n    };\n  });\n  return {\n    fallback: true,\n    paths: meetupsId\n  };\n}\nexport async function getStaticProps(context) {\n  const password = 'aUSjJhO7eUkOOC1t';\n  const username = 'learningnext';\n  const database = 'nextJsDB';\n  const url = `mongodb+srv://${username}:${password}@learning.j1yvg.mongodb.net/${database}?retryWrites=true&w=majority`;\n  const client = new MongoClient(url);\n  await client.connect();\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const {\n    meetupId\n  } = context.params;\n  const loadedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  const meetup = {\n    title: loadedMeetup.title,\n    address: loadedMeetup.address,\n    image: loadedMeetup.image,\n    description: loadedMeetup.description,\n    id: loadedMeetup._id.toString()\n  };\n  return {\n    props: {\n      meetup: meetup\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/SashaVerdiyev/Desktop/WebDev/react_course/nextJs/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","useRouter","React","MeetupDetail","Head","MeetupDetails","props","meetup","router","isFallback","title","image","description","address","getStaticPaths","password","username","database","url","client","connect","db","meetupsCollection","collection","loadedMeetups","find","_id","toArray","close","meetupsId","map","meetupId","toString","params","fallback","paths","getStaticProps","context","loadedMeetup","findOne","id"],"mappings":"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","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nimport Head from 'next/head';\n\nfunction MeetupDetails(props) {\n  const { meetup } = props;\n\n  const router = useRouter();\n\n  if (router.isFallback) return <div>Loading...</div>;\n\n  return (\n    <>\n      <Head>\n        <title>{meetup.title} </title>\n\n        <meta name='description' content='browse these meetups pls' />\n      </Head>\n      <MeetupDetail\n        image={meetup.image}\n        description={meetup.description}\n        address={meetup.address}\n        title={meetup.title}\n      />\n    </>\n  );\n}\n\nexport async function getStaticPaths() {\n  const password = 'aUSjJhO7eUkOOC1t';\n  const username = 'learningnext';\n  const database = 'nextJsDB';\n\n  const url = `mongodb+srv://${username}:${password}@learning.j1yvg.mongodb.net/${database}?retryWrites=true&w=majority`;\n\n  const client = new MongoClient(url);\n  await client.connect();\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const loadedMeetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  let meetupsId = loadedMeetups.map((meetup) => {\n    const meetupId = meetup._id.toString();\n    return { params: { meetupId } };\n  });\n\n  return { fallback: true, paths: meetupsId };\n}\n\nexport async function getStaticProps(context) {\n  const password = 'aUSjJhO7eUkOOC1t';\n  const username = 'learningnext';\n  const database = 'nextJsDB';\n\n  const url = `mongodb+srv://${username}:${password}@learning.j1yvg.mongodb.net/${database}?retryWrites=true&w=majority`;\n\n  const client = new MongoClient(url);\n  await client.connect();\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const { meetupId } = context.params;\n  const loadedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId),\n  });\n\n  client.close();\n\n  const meetup = {\n    title: loadedMeetup.title,\n    address: loadedMeetup.address,\n    image: loadedMeetup.image,\n    description: loadedMeetup.description,\n    id: loadedMeetup._id.toString(),\n  };\n\n  return {\n    props: { meetup: meetup },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}